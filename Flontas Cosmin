#include <bits/stdc++.h>
std::string normalize(const std::string &word)
{
    std::string normalized = word;
    std::string diacritics[] = {"ă", "â", "î", "ș", "ț", "Ă", "Â", "Î", "Ș", "Ț"};
    std::string replacements[] = {"a", "a", "i", "s", "t", "A", "A", "I", "S", "T"};

    for (size_t i = 0; i < sizeof(diacritics) / sizeof(diacritics[0]); ++i)
    {
        std::string::size_type pos;
        while ((pos = normalized.find(diacritics[i])) != std::string::npos)
        {
            normalized.replace(pos, diacritics[i].length(), replacements[i]);
        }
    }
    std::transform(normalized.begin(), normalized.end(), normalized.begin(), ::tolower);

    return normalized;
}

bool matches(const std::string &pattern, const std::string &word)
{
    if (pattern.length() != word.length()) return false;
    for (size_t i = 0; i < pattern.length(); ++i)
    {
        if (pattern[i] != '*' && pattern[i] != word[i])
        {
            return false;
        }
    }
    return true;
}

int main()
{
    std::locale::global(std::locale(""));
    std::ifstream file("input.csv.txt");
    std::string line;
    int attemptCount = 0;

    while (std::getline(file, line))
    {
        std::stringstream ss(line);
        std::string code, pattern, targetWord;

        std::getline(ss, code, ';');
        std::getline(ss, pattern, ';');
        std::getline(ss, targetWord);
        std::string normalizedPattern = normalize(pattern);
        std::string normalizedTargetWord = normalize(targetWord);
        if (matches(normalizedPattern, normalizedTargetWord))
        {
            std::cout << "Cuvantul numarul " << code << " gasit: " << targetWord << std::endl;
        }

        attemptCount++;
        if (attemptCount >= 1200)
        {
            std::cout << "Numar maxim de incercari depasit!" << std::endl;
            break;
        }
    }

    file.close();
    return 0;
}
